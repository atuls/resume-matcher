import { Express, Request, Response, NextFunction } from "express";
import { Server } from "http";
import { storage } from "./storage";
import { db } from "./db";
import {
  analysisResults,
  jobDescriptions,
  jobRequirements,
  resumes,
  candidateJobConnections
} from "@shared/schema";
import { count, desc, eq, and, not, like, gt, lt, isNull, sql, asc } from "drizzle-orm";
import multer from "multer";
import path from "path";
import fs from "fs";
import { z } from "zod";

export async function registerRoutes(app: Express): Promise<Server> {
  // Register all API routes
  app.get("/api", (_req: Request, res: Response) => {
    res.json({ message: "API is running" });
  });

  // Get red flag analysis for a resume
  app.get("/api/resumes/:id/red-flag-analysis", async (req: Request, res: Response) => {
    // Disable caching for this endpoint
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    
    try {
      const resumeId = req.params.id;
      const jobDescriptionId = req.query.jobDescriptionId?.toString() || null;
      
      console.log(`Getting red flag analysis for resume ${resumeId} with job ${jobDescriptionId || 'none'}`);
      
      // Fetch the resume
      const resume = await storage.getResume(resumeId);
      if (!resume) {
        return res.status(404).json({ message: "Resume not found" });
      }
      
      // Create an object to hold analysis data
      const analysisData = {
        currentJobPosition: null as string | null,
        currentCompany: null as string | null,
        isCurrentlyEmployed: false,
        redFlags: [] as string[],
        highlights: [] as string[],
        recentRoles: [] as Array<{ title: string; company: string; durationMonths: number; isContract: boolean }>,
        averageTenureMonths: 0
      };
      
      // Query the database for analysis results
      const analysisQuery = jobDescriptionId 
        ? await db.select()
            .from(analysisResults)
            .where(and(
              eq(analysisResults.resumeId, resumeId),
              eq(analysisResults.jobDescriptionId, jobDescriptionId)
            ))
            .orderBy(desc(analysisResults.createdAt))
            .limit(1)
        : await db.select()
            .from(analysisResults)
            .where(eq(analysisResults.resumeId, resumeId))
            .orderBy(desc(analysisResults.createdAt))
            .limit(1);
      
      console.log(`Found ${analysisQuery.length} analysis results for resume ${resumeId}`);
      
      if (analysisQuery.length > 0) {
        // Process the latest analysis
        const latestAnalysis = analysisQuery[0];
        
        // Extract red flags
        if (latestAnalysis.parsedRedFlags) {
          try {
            const parsedRedFlags = typeof latestAnalysis.parsedRedFlags === 'string'
              ? JSON.parse(latestAnalysis.parsedRedFlags)
              : latestAnalysis.parsedRedFlags;
            
            if (Array.isArray(parsedRedFlags)) {
              analysisData.redFlags = parsedRedFlags;
            }
          } catch (e) {
            console.error("Error parsing red flags:", e);
          }
        }
        
        // Extract work history
        if (latestAnalysis.parsedWorkHistory) {
          try {
            const parsedWorkHistory = typeof latestAnalysis.parsedWorkHistory === 'string'
              ? JSON.parse(latestAnalysis.parsedWorkHistory)
              : latestAnalysis.parsedWorkHistory;
            
            if (parsedWorkHistory) {
              if (parsedWorkHistory.currentJobPosition) {
                analysisData.currentJobPosition = parsedWorkHistory.currentJobPosition;
              }
              if (parsedWorkHistory.currentCompany) {
                analysisData.currentCompany = parsedWorkHistory.currentCompany;
              }
              if (parsedWorkHistory.isCurrentlyEmployed !== undefined) {
                analysisData.isCurrentlyEmployed = parsedWorkHistory.isCurrentlyEmployed;
              }
              if (Array.isArray(parsedWorkHistory.recentRoles)) {
                analysisData.recentRoles = parsedWorkHistory.recentRoles;
              }
              if (parsedWorkHistory.averageTenureMonths) {
                analysisData.averageTenureMonths = parsedWorkHistory.averageTenureMonths;
              }
            }
          } catch (e) {
            console.error("Error parsing work history:", e);
          }
        }
        
        // Extract skills
        if (latestAnalysis.parsedSkills) {
          try {
            const parsedSkills = typeof latestAnalysis.parsedSkills === 'string'
              ? JSON.parse(latestAnalysis.parsedSkills)
              : latestAnalysis.parsedSkills;
            
            if (Array.isArray(parsedSkills)) {
              analysisData.highlights = parsedSkills;
            } else if (parsedSkills && parsedSkills.highlights) {
              analysisData.highlights = parsedSkills.highlights;
            } else if (parsedSkills && parsedSkills.keySkills) {
              analysisData.highlights = parsedSkills.keySkills;
            }
          } catch (e) {
            console.error("Error parsing skills:", e);
          }
        }
      }
      
      // Return the analysis data
      return res.status(200).json({
        resumeId,
        jobDescriptionId,
        analysis: analysisData
      });
    } catch (error) {
      console.error("Error in red flag analysis:", error);
      return res.status(500).json({ message: "Error processing red flag analysis", error: String(error) });
    }
  });

  // Create HTTP server without actually listening yet
  const httpServer = require('http').createServer(app);
  return httpServer;
}